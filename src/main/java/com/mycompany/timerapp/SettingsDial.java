package com.mycompany.timerapp;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.Normalizer.Form;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.SwingWorker;
import javax.swing.Timer;

public class SettingsDial extends javax.swing.JDialog {

    Color c;
    SwingWorker sw;
    JFrame coloredFrame;
    Timer timerCountdown;

    public SettingsDial(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        

    }

    SettingsDial() {
        
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myChoices = new javax.swing.ButtonGroup();
        panel = new javax.swing.JPanel();
        countDown = new javax.swing.JRadioButton();
        onTimetxt = new javax.swing.JTextField();
        Cdtxt = new javax.swing.JTextField();
        chooseColor = new javax.swing.JButton();
        speed = new javax.swing.JComboBox();
        speedSelect = new javax.swing.JTextField();
        starter = new javax.swing.JButton();
        stoper = new javax.swing.JButton();
        colorSelected = new javax.swing.JTextField();
        onTime = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("timerT");
        setAlwaysOnTop(true);
        setMinimumSize(getPreferredSize());
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setName("dial"); // NOI18N

        panel.setBackground(new java.awt.Color(255, 255, 255));
        panel.setOpaque(false);

        myChoices.add(countDown);
        countDown.setText("countDown");
        countDown.setOpaque(false);
        countDown.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                countDownStateChanged(evt);
            }
        });

        onTimetxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Cdtxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        chooseColor.setBackground(java.awt.SystemColor.activeCaption);
        chooseColor.setText("Select Color");
        chooseColor.setToolTipText("");
        chooseColor.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 102, 102)));
        chooseColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseColorActionPerformed(evt);
            }
        });

        speed.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));
        speed.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        speedSelect.setEditable(false);
        speedSelect.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        speedSelect.setText("Select speed:");
        speedSelect.setBorder(null);

        starter.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        starter.setForeground(new java.awt.Color(0, 153, 0));
        starter.setText("START");
        starter.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 0)));
        starter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starterActionPerformed(evt);
            }
        });

        stoper.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        stoper.setForeground(new java.awt.Color(255, 0, 51));
        stoper.setText("STOP");
        stoper.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 0)));
        stoper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stoperActionPerformed(evt);
            }
        });

        colorSelected.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        colorSelected.setText("No color selected");
        colorSelected.setBorder(null);
        colorSelected.setOpaque(false);

        myChoices.add(onTime);
        onTime.setText("onTime");
        onTime.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                onTimeStateChanged(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(speedSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelLayout.createSequentialGroup()
                                        .addComponent(chooseColor, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(36, 36, 36)
                                        .addComponent(colorSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 94, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(onTime, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(countDown))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Cdtxt)
                                    .addComponent(onTimetxt, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(starter, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(stoper, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32))))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(speed, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(onTime)
                    .addComponent(onTimetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countDown)
                    .addComponent(Cdtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseColor, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(speedSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(speed, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(starter, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stoper, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleParent(getRootPane());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_onTimeStateChanged
        if (onTime.isSelected()) {

            Cdtxt.setEditable(false);
            onTimetxt.requestFocus(true);
            onTimetxt.setEditable(true);
            countDown.setEnabled(false);
        }
    }//GEN-LAST:event_onTimeStateChanged

    private void stoperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stoperActionPerformed
        sw.cancel(true);
        coloredFrame.dispose();
        onTimetxt.setEditable(true);
        Cdtxt.setEditable(true);
        starter.setEnabled(true);
        speed.setEditable(true);
        chooseColor.setEnabled(true);
        speed.setEnabled(true);
        countDown.setEnabled(true);
        onTime.setEnabled(true);

    }//GEN-LAST:event_stoperActionPerformed

    private void starterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starterActionPerformed
        int start;
        JFrame coloredFrame;
        coloredFrame = new JFrame();
        coloredFrame.setSize(500, 500);
        coloredFrame.setLocation(600, 0);
        coloredFrame.setUndecorated(true);

        ActionListener colorChange = (ActionEvent e) -> {
            sw = new SwingWorker() {
                @Override
                protected String doInBackground() throws Exception {
                    while (!isCancelled()) {
                        coloredFrame.setVisible(true);
                        coloredFrame.getContentPane().setBackground(c);

                        int threadSpeed = Integer.parseInt((String) speed.getSelectedItem());
                        switch (threadSpeed) {
                            case 1:
                            coloredFrame.getContentPane().setBackground(Color.white);
                            Thread.sleep(1000);
                            coloredFrame.getContentPane().setBackground(c);
                            Thread.sleep(1000);
                            break;
                            case 2:
                            coloredFrame.getContentPane().setBackground(Color.white);
                            Thread.sleep(2000);
                            coloredFrame.getContentPane().setBackground(c);
                            Thread.sleep(2000);
                            break;
                            case 3:
                            coloredFrame.getContentPane().setBackground(Color.white);
                            Thread.sleep(3000);
                            coloredFrame.getContentPane().setBackground(c);
                            Thread.sleep(3000);
                            break;
                            case 4:
                            coloredFrame.getContentPane().setBackground(Color.white);
                            Thread.sleep(4000);
                            coloredFrame.getContentPane().setBackground(c);
                            Thread.sleep(4000);
                            break;
                            case 5:
                            coloredFrame.getContentPane().setBackground(Color.white);
                            Thread.sleep(5000);
                            coloredFrame.getContentPane().setBackground(c);
                            Thread.sleep(5000);
                            break;
                        }
                    }

                    return null;

                }
                ;

            };   sw.execute();
        };
        if (countDown.isSelected()) {
            String secondsEntered = Cdtxt.getText()+"000" ;
            start = Integer.parseInt(secondsEntered);
            System.out.println("Count entered: " + start);
            onTimetxt.setEditable(false);
            Cdtxt.setEditable(false);
            starter.setEnabled(false);
            speed.setEditable(false);
            chooseColor.setEnabled(false);
            countDown.setEnabled(false);
            onTime.setEnabled(false);
            speed.setEnabled(false);
            timerCountdown = new Timer(start, colorChange);
            timerCountdown.setRepeats(false);
            timerCountdown.start();
            stoper.setEnabled(true);
        } else if (onTime.isSelected()) {
            String startOnTime = onTimetxt.getText();
            int hours = Integer.parseInt(startOnTime.split((":"))[0]);
            int minutes = Integer.parseInt(startOnTime.split((":"))[1]);
            int seconds = Integer.parseInt(startOnTime.split((":"))[2]);
            if (hours < 24 && minutes < 60 && seconds < 60) {
                int finalSeconds = (((hours * 60) + minutes) * 60) + seconds;
                int onTimeMilis = finalSeconds * 1000;
                String currentInString = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
                int curHours = Integer.parseInt(currentInString.split((":"))[0]);
                int curMinutes = Integer.parseInt(currentInString.split((":"))[1]);
                int curSeconds = Integer.parseInt(currentInString.split((":"))[2]);
                int currentSeconds = (((curHours * 60) + curMinutes) * 60) + curSeconds;
                int curTimeMilis = currentSeconds * 1000;
                int startIn = onTimeMilis - curTimeMilis;
                if (startIn < 0) {
                    //onTimetxt.setText("Please enter the time after the current one. Current time: " + currentInString);
                    onTimetxt.requestFocus(true);
                    stoper.setEnabled(false);
                    return;
                }
                System.out.println("On time milis: " + onTimeMilis + " Current milis " + curTimeMilis);
                System.out.println("Start in " + startIn);
                onTimetxt.setEditable(false);
                Cdtxt.setEditable(false);
                starter.setEnabled(false);
                speed.setEditable(false);
                chooseColor.setEnabled(false);
                countDown.setEnabled(false);
                onTime.setEnabled(false);
                speed.setEnabled(false);
                timerCountdown = new Timer((int) startIn, colorChange);
                timerCountdown.setRepeats(false);
                timerCountdown.start();
                stoper.setEnabled(true);
            } else {
                onTimetxt.requestFocus(true);
                stoper.setEnabled(false);

            }

        }

    }//GEN-LAST:event_starterActionPerformed

    private void chooseColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseColorActionPerformed
        JColorChooser jcc = new JColorChooser();

        JDialog dialog = JColorChooser.createDialog(jcc, "Choose color", true, jcc, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                c = jcc.getColor();
                colorSelected.setText("Color selected");
                colorSelected.setOpaque(true);
                colorSelected.setBackground(c);
            }
        }, null);
        dialog.setVisible(true);

    }//GEN-LAST:event_chooseColorActionPerformed

    private void countDownStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_countDownStateChanged
        if (countDown.isSelected()) {

            onTimetxt.setEditable(false);
            Cdtxt.requestFocus(true);
            Cdtxt.setEditable(true);
            onTime.setEnabled(false);
        }
    }//GEN-LAST:event_countDownStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SettingsDial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(() -> {
            SettingsDial dialog = new SettingsDial(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
            
         
        });

         
java.awt.EventQueue.invokeLater(() -> {
            new SettingsDial().dialogInit();
            
        });
        
               
          
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JTextField Cdtxt;
    protected javax.swing.JButton chooseColor;
    protected javax.swing.JTextField colorSelected;
    protected javax.swing.JRadioButton countDown;
    protected javax.swing.ButtonGroup myChoices;
    protected javax.swing.JRadioButton onTime;
    protected javax.swing.JTextField onTimetxt;
    protected javax.swing.JPanel panel;
    protected javax.swing.JComboBox speed;
    protected javax.swing.JTextField speedSelect;
    protected javax.swing.JButton starter;
    protected javax.swing.JButton stoper;
    // End of variables declaration//GEN-END:variables

}
